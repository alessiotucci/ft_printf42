!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/printf_retry/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
#:	README.md	/^#  #:$/;"	c
$(NAME)	Makefile	/^$(NAME): ${OBJS}$/;"	t
$(NAME)	libft/Makefile	/^$(NAME):$/;"	t
**` `  (space) flag:**	README.md	/^# **` `  (space) flag:**$/;"	c
.c.o	Makefile	/^.c.o = ${CC} -I ${HDRS} includes -c $< -o ${<:.c=.o}$/;"	m
0:	README.md	/^# 0: $/;"	c
CC	Makefile	/^CC = gcc -Wall -Wextra -Werror$/;"	m
CFILES	libft/Makefile	/^CFILES	= $(files:%=%.c)$/;"	m
CmpFlags	libft/Makefile	/^CmpFlags	= -Wall -Wextra -Werror$/;"	m
Compiler	libft/Makefile	/^Compiler	= clang$/;"	m
FT_PRINTF_H	incl/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
HDRS	Makefile	/^HDRS = incl\/ft_printf.h$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H	/;"	d
Library	libft/Makefile	/^Library		= libft$/;"	m
NAME	Makefile	/^NAME = .\/libftprintf.a$/;"	m
NAME	libft/Makefile	/^NAME	= $(OUTN)$/;"	m
OBJS	Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
OFILES	libft/Makefile	/^OFILES	= $(files:%=%.o)$/;"	m
OUTN	libft/Makefile	/^OUTN	= $(Library).a$/;"	m
PRINTF BUFFERS:	README.md	/^# PRINTF BUFFERS:$/;"	c
RM	Makefile	/^RM = rm -f$/;"	m
SRC	Makefile	/^SRC = .\/ft_printf.c \\$/;"	m
STATIC  LIBRARY:	README.md	/^# STATIC  LIBRARY:$/;"	c
__anon1dff41fc0108	incl/ft_printf.h	/^{$/;"	s
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
check_flags	check_flags_long.c	/^int check_flags(const char *str, int i)$/;"	f	typeref:typename:int
check_flags	newe_function_gpt.c	/^int check_flags(const char *str, int i)$/;"	f	typeref:typename:int
check_formatting_flags	srcs/check_flags.c	/^int check_formatting_flags(const char *str, int i)$/;"	f	typeref:typename:int
check_sign	srcs/ft_num_utils.c	/^int check_sign(int num)$/;"	f	typeref:typename:int
check_sign_flags	srcs/check_flags.c	/^int check_sign_flags(const char *str, int i)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
digits	libft/ft_itoa.c	/^static unsigned int	digits(int n)$/;"	f	typeref:typename:unsigned int	file:
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
files	libft/Makefile	/^files 	   = ft_strlen \\$/;"	m
flags	incl/ft_printf.h	/^}				flags;$/;"	t	typeref:struct:__anon1dff41fc0108
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_how_many_words	libft/ft_split.c	/^size_t	ft_how_many_words(char const *s, char c)$/;"	f	typeref:typename:size_t
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int argum)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int argum)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int argum)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int argum)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int argum)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_len_u	srcs/ft_pointer.c	/^int	ft_len_u(unsigned long n)$/;"	f	typeref:typename:int
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f) (void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *str, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *ptr1, const void *ptr2, size_t num)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *sour, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int v, size_t count)$/;"	f	typeref:typename:void *
ft_pointer	srcs/ft_pointer.c	/^int	ft_pointer(unsigned long nb)$/;"	f	typeref:typename:int
ft_printf	ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f	typeref:typename:int
ft_printf (without bonus ðŸ˜¢ðŸ˜¢ðŸ˜¢)	README.md	/^# ft_printf (without bonus ðŸ˜¢ðŸ˜¢ðŸ˜¢)$/;"	c
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr	srcs/ft_num_utils.c	/^int	ft_putnbr(int n)$/;"	f	typeref:typename:int
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putnumber_base	srcs/ft_num_utils.c	/^int	ft_putnumber_base(unsigned long long int nbr, char *base)$/;"	f	typeref:typename:int
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *c, int fd)$/;"	f	typeref:typename:void
ft_putuns	srcs/ft_num_utils.c	/^int ft_putuns(unsigned int nbr)$/;"	f	typeref:typename:int
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *sour)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *sour, size_t destsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *sour, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strncpy	libft/ft_split.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int chad)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int chad)$/;"	f	typeref:typename:int
g_bonus	ft_printf.c	/^flags g_bonus;$/;"	v	typeref:typename:flags
init_tdata	ft_printf.c	/^void init_tdata(flags *data)$/;"	f	typeref:typename:void
is_dot	incl/ft_printf.h	/^	int is_dot;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
is_minus	incl/ft_printf.h	/^    int is_minus;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
is_plus	incl/ft_printf.h	/^    int is_plus;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
is_zero	incl/ft_printf.h	/^    int is_zero;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
lenght_word	libft/ft_split.c	/^int	lenght_word(char const *s, char c)$/;"	f	typeref:typename:int
main	moulinette.c	/^int main(void)$/;"	f	typeref:typename:int
main	test_printf.c	/^int	main()$/;"	f	typeref:typename:int
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
placeholder	ft_printf.c	/^static int placeholder(va_list *arg, char q, int count)$/;"	f	typeref:typename:int	file:
precision	incl/ft_printf.h	/^    int precision;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
print_sign	srcs/check_flags.c	/^int print_sign(int n)$/;"	f	typeref:typename:int
prints the sign (+ or -) of a signed number.	README.md	/^# prints the sign (+ or -) of a signed number. $/;"	c
pt_putchar	srcs/ft_printf_utils.c	/^int	pt_putchar(char c)$/;"	f	typeref:typename:int
pt_putstr	srcs/ft_printf_utils.c	/^int	pt_putstr(char *str)$/;"	f	typeref:typename:int
pt_strlen	srcs/ft_printf_utils.c	/^int	pt_strlen(const char *str)$/;"	f	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
specifies the precision of a floating-point number.	README.md	/^# specifies the precision of a floating-point number. $/;"	c
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
white_spaces	srcs/ft_pointer.c	/^int	white_spaces(void)$/;"	f	typeref:typename:int
width	incl/ft_printf.h	/^    int width;$/;"	m	struct:__anon1dff41fc0108	typeref:typename:int
